/*
 * OmniVision OV5640 Camera Header File
 *
 * Copyright (C) 2017 George Zheng <george.zheng@embest-tech.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef	__OV5640_COMMON_H__
#define	__OV5640_COMMON_H__

/* this driver name */
#define DRIVER_NAME 			"ov5640"
/* format control register */
#define REG_FORMAT_CTRL00       	0x4300
/* high bits of chip ID */
#define REG_CHIP_ID_HIGH			0x300a
/* low bits of chip ID */
#define REG_CHIP_ID_LOW				0x300b
/* array end token */
#define REG_NULL					0x0000
/* ov5640 ID */
#define OV5640_ID					0x5640

#define Normal_Effect		0
#define Blueish_Effect		1
#define Redish_Effect		2
#define BandW_Effect		3
#define Sepia_Effect		4
#define Negative_Effect		5
#define Greenish_Effect		6
#define Overexposure_Effect	7
#define Solarize_Effect		8

#define WhiteBalance_Auto	0
#define WhiteBalance_Sunny	1
#define WhiteBalance_Office	2
#define WhiteBalance_Cloudy	3
#define WhiteBalance_Home	4
/* embest debug macro,0 is disable,1 is enable */
#define DEBUG 0
#if DEBUG
#define embest_debug(format, ...) pr_err ( format, ## __VA_ARGS__)
#else
#define embest_debug(format, ...) do {} while (0)
#endif

/* power down gpio */
extern /*static*/ int pwn_gpio;
/* reset gpio */
extern /*static*/ int rst_gpio;

struct ov5640_platform_data {
	/* pclk frequency */
	s64 link_frequency;
};

struct sensor_register {
	/* register address and value */
	u16 addr;
	u8 value;
};

struct ov5640_framesize {
	/* frame width and height */
	u16 width;
	u16 height;
	u16 max_exp_lines;
	const struct sensor_register *regs;
};

struct ov5640_pixfmt {
	u32 code;
	/* Output format Register Value (REG_FORMAT_CTRL00) */
	struct sensor_register *format_ctrl_regs;
};

struct ov5640 {
	/* sub device */
	struct v4l2_subdev sd;
	/* media pad */
	struct media_pad pad;
	/* frame format */
	struct v4l2_mbus_framefmt format;
	/* system input clock frequency */
	unsigned int xvclk_frequency;
	/* ov5640 platform data */
	const struct ov5640_platform_data *pdata;
	/* platform describe of camera subdev */
	struct soc_camera_subdev_desc	ssdd_dt;
	/* lock used to access this structure */
	struct mutex lock;
	/* i2c_client of the ov5640 */
	struct i2c_client *client;
	/* pointing to ov5640 frame size struct */
	const struct ov5640_framesize *frame_size;
	/* pointing to the format regesters */
	struct sensor_register *format_ctrl_regs;
	/* pointing to the platform clock */
	struct v4l2_clk	*clk;
	/* stream start or stop status */
	int streaming;
	/* the framerate */
	unsigned char frame_rate;
	/* the ctrl_handler */
	struct v4l2_ctrl_handler ctrl_handler;
};

#if 1
static struct sensor_register ov5640_ini_vga[] = 
{ // {0x3103, 0x11},
    // {0x3008, 0x82},
    {0x3008, 0x42},
    {0x3103, 0x03},
    {0x3017, 0x7f},
    {0x3018, 0xff},

    //{0x3031,0x08},//inner regulator
    {0x302c, 0xc2},

    {0x3108, 0x01},
    {0x3630, 0x36},
    {0x3631, 0x0e},
    {0x3632, 0xe2},
    {0x3633, 0x12},
    {0x3621, 0xe0},
    {0x3704, 0xa0},
    {0x3703, 0x5a},
    {0x3715, 0x78},
    {0x3717, 0x01},
    {0x370b, 0x60},
    {0x3705, 0x1a},
    {0x3905, 0x02},
    {0x3906, 0x10},
    {0x3901, 0x0a},
    {0x3731, 0x12},
    {0x3600, 0x08},
    {0x3601, 0x33},
    {0x302d, 0x60},
    {0x3620, 0x52},
    {0x371b, 0x20},
    {0x471c, 0x50},

    {0x3a13, 0x43},
    {0x3a18, 0x00},
    {0x3a19, 0x7c},

    {0x3635, 0x13},
    {0x3636, 0x03},
    {0x3634, 0x40},
    {0x3622, 0x01},

    {0x3c04, 0x28},
    {0x3c05, 0x98},
    {0x3c06, 0x00},
    {0x3c07, 0x08},
    {0x3c08, 0x00},
    {0x3c09, 0x1c},
    {0x3c0a, 0x9c},
    {0x3c0b, 0x40},

//    {0x3820, 0x41},
//    {0x3821, 0x07},  //{0x3821, 0x07},

    {0x3800, 0x00},
    {0x3801, 0x00},
    {0x3802, 0x00},
    {0x3803, 0x04},
    {0x3804, 0x0a},
    {0x3805, 0x3f},
    {0x3806, 0x07},
    {0x3807, 0x9b},
    {0x3808, 0x02},     //640x480
    {0x3809, 0x80},
    {0x380a, 0x01},
    {0x380b, 0xe0},
    {0x3810, 0x00},
    {0x3811, 0x10},
    {0x3812, 0x00},
    {0x3813, 0x06},
    {0x3814, 0x31},
    {0x3815, 0x31},

    {0x3034, 0x18},
    {0x3035, 0x11},
    {0x3036, 0x46},
    {0x3037, 0x13},

    {0x380c, 0x07},
    {0x380d, 0x68},
    {0x380e, 0x03},
    {0x380f, 0xd0},

    {0x3c01, 0xb4},
    {0x3c00, 0x04},
    {0x3a08, 0x01},
    {0x3a09, 0x27},
    {0x3a0e, 0x03},
    {0x3a0a, 0x00},
    {0x3a0b, 0xf6},
    {0x3a0d, 0x04},

    {0x3a00, 0x38},     //30fps-10fps
    {0x3a02, 0x03},
    {0x3a03, 0xd8},
    {0x3a14, 0x03},
    {0x3a15, 0xd8},

    {0x3618, 0x00},
    {0x3612, 0x29},
    {0x3708, 0x64},
    {0x3709, 0x52},
    {0x370c, 0x03},

    {0x4001, 0x02},
    {0x4004, 0x02},
    {0x3000, 0x00},
    {0x3002, 0x1c},
    {0x3004, 0xff},
    {0x3006, 0xc3},
    {0x300e, 0x58},
    {0x302e, 0x00},
    {0x4300, 0x32},
    {0x501f, 0x00},
    {0x4713, 0x03},
    {0x4407, 0x04},
    {0x440e, 0x00},
    {0x460b, 0x35},
    {0x460c, 0x22},
    {0x4837, 0x22},
    {0x3824, 0x02},
    {0x5001, 0xa3},
	//awb
	{0x5180, 0xff},
	{0x5181, 0xf2},
	{0x5182, 0x11},
	{0x5183, 0x14},
	{0x5184, 0x25},
	{0x5185, 0x24},
	{0x5186, 0x10},
	{0x5187, 0x12},
	{0x5188, 0x10},
	{0x5189, 0x80},
	{0x518a, 0x54},
	{0x518b, 0xb8},
	{0x518c, 0xb2},
	{0x518d, 0x42},
	{0x518e, 0x3a},
	{0x518f, 0x56},
	{0x5190, 0x46},
	{0x5191, 0xf0},
	{0x5192, 0x0f},
	{0x5193, 0x70},
	{0x5194, 0xf0},
	{0x5195, 0xf0},
	{0x5196, 0x03},
	{0x5197, 0x01},     // local limit
	{0x5198, 0x06},
	{0x5199, 0x62},
	{0x519a, 0x04},
	{0x519b, 0x00},
	{0x519c, 0x04},
	{0x519d, 0xe7},
	{0x519e, 0x38},

	//color matrix
	{0x5381, 0x1e},
	{0x5382, 0x5b},
	{0x5383, 0x12},
	{0x5384, 0x0d},
	{0x5385, 0x7e},
	{0x5386, 0x8d},
	{0x5387, 0x78},
	{0x5388, 0x68},
	{0x5389, 0x10},
	{0x538a, 0x01},
	{0x538b, 0x98},

	{0x5480, 0x01},
	{0x5481, 0x08},
	{0x5482, 0x14},
	{0x5483, 0x28},
	{0x5484, 0x51},
	{0x5485, 0x65},
	{0x5486, 0x71},
	{0x5487, 0x7D},
	{0x5488, 0x87},
	{0x5489, 0x91},
	{0x548a, 0x9A},
	{0x548b, 0xaA},
	{0x548c, 0xB8},
	{0x548d, 0xcD},
	{0x548e, 0xdD},
	{0x548f, 0xeA},
	{0x5490, 0x1D},


	//sharpness and noise 
	{0x5300, 0x08},
	{0x5301, 0x30},
	{0x5302, 0x10},
	{0x5303, 0x00},
	{0x5304, 0x08},
	{0x5305, 0x30},
	{0x5306, 0x08},
	{0x5307, 0x16},
	{0x5308, 0x25},		//sharpen manual
	{0x5309, 0x08},
	{0x530a, 0x30},
	{0x530b, 0x04},
	{0x530c, 0x06},

	//UV adjust
	{0x5580, 0x02},
	{0x5583, 0x40},
	{0x5584, 0x10},
	{0x5589, 0x10},
	{0x558a, 0x00},
	{0x558b, 0xf8},

	//lens shading
	{0x5000, 0xa7},
	{0x5800, 0x1f},
	{0x5801, 0x11},
	{0x5802, 0xe },
	{0x5803, 0xe },
	{0x5804, 0x11},
	{0x5805, 0x23},
	{0x5806, 0xc },
	{0x5807, 0x9 },
	{0x5808, 0x5 },
	{0x5809, 0x5 },
	{0x580a, 0x8 },
	{0x580b, 0xe },
	{0x580c, 0x8 },
	{0x580d, 0x3 },
	{0x580e, 0x0 },
	{0x580f, 0x0 },
	{0x5810, 0x3 },
	{0x5811, 0xa },
	{0x5812, 0x9 },
	{0x5813, 0x4 },
	{0x5814, 0x0 },
	{0x5815, 0x1 },
	{0x5816, 0x4 },
	{0x5817, 0xb },
	{0x5818, 0xd },
	{0x5819, 0xa },
	{0x581a, 0x7 },
	{0x581b, 0x7 },
	{0x581c, 0xa },
	{0x581d, 0x10},
	{0x581e, 0x3a},
	{0x581f, 0x1a},
	{0x5820, 0x13},
	{0x5821, 0x13},
	{0x5822, 0x1a},
	{0x5823, 0x3e},
	{0x5824, 0x4c},
	{0x5825, 0x2a},
	{0x5826, 0xc },
	{0x5827, 0x2a},
	{0x5828, 0x26},
	{0x5829, 0xa },
	{0x582a, 0x24},
	{0x582b, 0x24},
	{0x582c, 0x24},
	{0x582d, 0x28},
	{0x582e, 0x8 },
	{0x582f, 0x42},
	{0x5830, 0x40},
	{0x5831, 0x42},
	{0x5832, 0x6 },
	{0x5833, 0xa },
	{0x5834, 0x24},
	{0x5835, 0x24},
	{0x5836, 0x26},
	{0x5837, 0x28},
	{0x5838, 0x2c},
	{0x5839, 0x2c},
	{0x583a, 0xc },
	{0x583b, 0x2c},
	{0x583c, 0x28},
	{0x583d, 0xce},

    {0x5688, 0x22},
    {0x5689, 0x22},
    {0x568a, 0x42},
    {0x568b, 0x24},
    {0x568c, 0x42},
    {0x568d, 0x24},
    {0x568e, 0x22},
    {0x568f, 0x22},

    {0x5025, 0x00},

    {0x3a0f, 0x40},
    {0x3a10, 0x38},
    {0x3a11, 0x71},
    {0x3a1b, 0x40},
    {0x3a1e, 0x38},
    {0x3a1f, 0x10},

    {0x4005, 0x1a},

    {0x3503, 0x00},
    {0x3008, 0x02},
    { REG_NULL, 0x00 },
};
#endif
/* 640X480 VGA */
static struct sensor_register ov5640_vga[] = {
	{0x3c07, 0x08 }, //{0x3820, 0x41 }, {0x3821, 0x07 },
	{0x3814, 0x31 }, {0x3815, 0x31 }, {0x3800, 0x00 },
	{0x3801, 0x00 }, {0x3802, 0x00 }, {0x3803, 0x04 },
	{0x3804, 0x0a }, {0x3805, 0x3f }, {0x3806, 0x07 },
	{0x3807, 0x9b }, {0x3808, 0x02 }, {0x3809, 0x80 },
	{0x380a, 0x01 }, {0x380b, 0xe0 }, {0x380c, 0x07 },
	{0x380d, 0x68 }, {0x380e, 0x03 }, {0x380f, 0xd8 },
	{0x3813, 0x06 }, {0x3618, 0x00 }, {0x3612, 0x29 },
	{0x3709, 0x52 }, {0x370c, 0x03 }, {0x3a02, 0x0b },
	{0x3a03, 0x88 }, {0x3a14, 0x0b }, {0x3a15, 0x88 },
	{0x4004, 0x02 }, {0x3002, 0x1c }, {0x3006, 0xc3 },
	{0x4713, 0x03 }, {0x4407, 0x04 }, {0x460b, 0x35 },
	{0x460c, 0x22 }, {0x4837, 0x22 }, {0x3824, 0x02 },
	{0x5001, 0xa3 }, {0x3034, 0x18 }, 
	{0x3036, 0x46 }, {0x3037, 0x13 }, {0x3503, 0x00 },
	{ REG_NULL, 0x00 },
};

/* 1280X720 720p     1892 740   30fps*/
static struct sensor_register ov5640_720p[] = {
	{0x3c07, 0x07 },
	/*{0x3820, 0x41 }, {0x3821, 0x07 },*/ {0x3814, 0x31 },
	{0x3815, 0x31 }, {0x3800, 0x00 }, {0x3801, 0x00 },
	{0x3802, 0x00 }, {0x3803, 0xfa }, {0x3804, 0x0a },
	{0x3805, 0x3f }, {0x3806, 0x06 }, {0x3807, 0xa9 },
	{0x3808, 0x05 }, {0x3809, 0x00 }, {0x380a, 0x02 },
	{0x380b, 0xd0 }, {0x380c, 0x07 }, {0x380d, 0x64 },
	{0x380e, 0x02 }, {0x380f, 0xe4 }, {0x3813, 0x04 },
	{0x3618, 0x00 }, {0x3612, 0x29 }, {0x3709, 0x52 },
	{0x370c, 0x03 }, {0x3a02, 0x02 }, {0x3a03, 0xe0 },
	{0x3a14, 0x02 }, {0x3a15, 0xe0 }, {0x4004, 0x02 },
	{0x3002, 0x1c }, {0x3006, 0xc3 }, {0x4713, 0x03 },
	{0x4407, 0x04 }, {0x460b, 0x37 }, {0x460c, 0x20 },
	{0x4837, 0x16 }, {0x3824, 0x04 }, {0x5001, 0x83 },
	{0x3503, 0x00 },{ REG_NULL, 0x00 },
};

/* 720x480 NTSC */
static struct sensor_register ov5640_NTSC[] = {
	{0x3c07, 0x08 }, //{0x3820, 0x41 }, {0x3821, 0x07 },
	{0x3814, 0x31 }, {0x3815, 0x31 }, {0x3800, 0x00 },
	{0x3801, 0x00 }, {0x3802, 0x00 }, {0x3803, 0x04 },
	{0x3804, 0x0a }, {0x3805, 0x3f }, {0x3806, 0x06 },
	{0x3807, 0xd4 }, {0x3808, 0x02 }, {0x3809, 0xd0 },
	{0x380a, 0x01 }, {0x380b, 0xe0 }, {0x380c, 0x07 },
	{0x380d, 0x68 }, {0x380e, 0x03 }, {0x380f, 0xd8 },
	{0x3813, 0x06 }, {0x3618, 0x00 }, {0x3612, 0x29 },
	{0x3709, 0x52 }, {0x370c, 0x03 }, {0x3a02, 0x0b },
	{0x3a03, 0x88 }, {0x3a14, 0x0b }, {0x3a15, 0x88 },
	{0x4004, 0x02 }, {0x3002, 0x1c }, {0x3006, 0xc3 },
	{0x4713, 0x03 }, {0x4407, 0x04 }, {0x460b, 0x35 },
	{0x460c, 0x22 }, {0x4837, 0x22 }, {0x3824, 0x02 },
	{0x5001, 0xa3 }, {0x3034, 0x18 },
	{0x3036, 0x46 }, {0x3037, 0x13 },{ REG_NULL, 0x00 },
};

/* 720x576 PAL */
static struct sensor_register ov5640_PAL[] = {
	{0x3c07, 0x08 }, //{0x3820, 0x41 }, {0x3821, 0x07 },
	{0x3814, 0x31 }, {0x3815, 0x31 }, {0x3800, 0x00 },
	{0x3801, 0x60 }, {0x3802, 0x00 }, {0x3803, 0x04 },
	{0x3804, 0x09 }, {0x3805, 0x7e }, {0x3806, 0x07 },
	{0x3807, 0x9b }, {0x3808, 0x02 }, {0x3809, 0xd0 },
	{0x380a, 0x02 }, {0x380b, 0x40 }, {0x380c, 0x07 },
	{0x380d, 0x68 }, {0x380e, 0x03 }, {0x380f, 0xd8 },
	{0x3813, 0x06 }, {0x3618, 0x00 }, {0x3612, 0x29 },
	{0x3709, 0x52 }, {0x370c, 0x03 }, {0x3a02, 0x0b },
	{0x3a03, 0x88 }, {0x3a14, 0x0b }, {0x3a15, 0x88 },
	{0x4004, 0x02 }, {0x3002, 0x1c }, {0x3006, 0xc3 },
	{0x4713, 0x03 }, {0x4407, 0x04 }, {0x460b, 0x35 },
	{0x460c, 0x22 }, {0x4837, 0x22 }, {0x3824, 0x02 },
	{0x5001, 0xa3 }, {0x3034, 0x18 }, 
	{0x3036, 0x46 }, {0x3037, 0x13 },{ REG_NULL, 0x00 },
};

/* 176x144 QCIF */
static struct sensor_register ov5640_QCIF[] = {
	{0x3c07, 0x08 }, //{0x3820, 0x41 }, {0x3821, 0x07 },
	{0x3814, 0x31 }, {0x3815, 0x31 }, {0x3800, 0x00 },
	{0x3801, 0x00 }, {0x3802, 0x00 }, {0x3803, 0x04 },
	{0x3804, 0x0a }, {0x3805, 0x3f }, {0x3806, 0x07 },
	{0x3807, 0x9b }, {0x3808, 0x00 }, {0x3809, 0xb0 },
	{0x380a, 0x00 }, {0x380b, 0x90 }, {0x380c, 0x07 },
	{0x380d, 0x68 }, {0x380e, 0x03 }, {0x380f, 0xd8 },
	{0x3813, 0x06 }, {0x3618, 0x00 }, {0x3612, 0x29 },
	{0x3709, 0x52 }, {0x370c, 0x03 }, {0x3a02, 0x0b },
	{0x3a03, 0x88 }, {0x3a14, 0x0b }, {0x3a15, 0x88 },
	{0x4004, 0x02 }, {0x3002, 0x1c }, {0x3006, 0xc3 },
	{0x4713, 0x03 }, {0x4407, 0x04 }, {0x460b, 0x35 },
	{0x460c, 0x22 }, {0x4837, 0x22 }, {0x3824, 0x02 },
	{0x5001, 0xa3 }, {0x3034, 0x18 }, 
	{0x3036, 0x46 }, {0x3037, 0x13 },{ REG_NULL, 0x00 },
};

/* 1024X768 SXGA */
static struct sensor_register ov5640_xga[] = {
	{0x3c07, 0x08 }, //{0x3820, 0x41 }, {0x3821, 0x07 },
	{0x3814, 0x31 }, {0x3815, 0x31 }, {0x3800, 0x00 },
	{0x3801, 0x00 }, {0x3802, 0x00 }, {0x3803, 0x04 },
	{0x3804, 0x0a }, {0x3805, 0x3f }, {0x3806, 0x07 },
	{0x3807, 0x9b }, {0x3808, 0x04 }, {0x3809, 0x00 },
	{0x380a, 0x03 }, {0x380b, 0x00 }, {0x380c, 0x07 },
	{0x380d, 0x68 }, {0x380e, 0x03 }, {0x380f, 0xd8 },
	{0x3813, 0x06 }, {0x3618, 0x00 }, {0x3612, 0x29 },
	{0x3709, 0x52 }, {0x370c, 0x03 }, {0x3a02, 0x0b },
	{0x3a03, 0x88 }, {0x3a14, 0x0b }, {0x3a15, 0x88 },
	{0x4004, 0x02 }, {0x3002, 0x1c }, {0x3006, 0xc3 },
	{0x4713, 0x03 }, {0x4407, 0x04 }, {0x460b, 0x35 },
	{0x460c, 0x20 }, {0x4837, 0x22 }, {0x3824, 0x01 },
	{0x5001, 0xa3 }, {0x3034, 0x18 },{0x3037, 0x13 },
	{ REG_NULL, 0x00 },
};

/* 1920X1080 1080p */
static struct sensor_register ov5640_1080p[] = {
	{0x3c07, 0x07 }, //{0x3820, 0x40 }, {0x3821, 0x06 },
	{0x3814, 0x11 }, {0x3815, 0x11 }, {0x3800, 0x00 },
	{0x3801, 0x00 }, {0x3802, 0x00 }, {0x3803, 0xee },
	{0x3804, 0x0a }, {0x3805, 0x3f }, {0x3806, 0x05 },
	{0x3807, 0xc3 }, {0x3808, 0x07 }, {0x3809, 0x80 },
	{0x380a, 0x04 }, {0x380b, 0x38 }, {0x380c, 0x0b },
	{0x380d, 0x1c }, {0x380e, 0x07 }, {0x380f, 0xb0 },
	{0x3813, 0x04 }, {0x3618, 0x04 }, {0x3612, 0x2b },
	{0x3709, 0x12 }, {0x370c, 0x00 }, {0x3a02, 0x07 },
	{0x3a03, 0xae }, {0x3a14, 0x07 }, {0x3a15, 0xae },
	{0x4004, 0x06 }, {0x3002, 0x1c }, {0x3006, 0xc3 },
	{0x4713, 0x02 }, {0x4407, 0x0c }, {0x460b, 0x37 },
	{0x460c, 0x20 }, {0x4837, 0x2c }, {0x3824, 0x01 },
	{0x5001, 0x83 }, {0x3034, 0x18 }, {0x3035, 0x21 },
	{0x3036, 0x46 }, {0x3037, 0x13 },{ REG_NULL, 0x00 },

};

/* 800*600 SVGA  */
static struct sensor_register ov5640_svga[] = {
	{0x3c07, 0x07 }, //{0x3820, 0x40 }, {0x3821, 0x06 },
        {0x3814, 0x11 }, {0x3815, 0x11 }, {0x3800, 0x00 },
        {0x3801, 0x00 }, {0x3802, 0x00 }, {0x3803, 0x00 },
        {0x3804, 0x0a }, {0x3805, 0x3f }, {0x3806, 0x07 },
        {0x3807, 0x9f }, {0x3808, 0x03 }, {0x3809, 0x20 },
        {0x380a, 0x02 }, {0x380b, 0x58 }, {0x380c, 0x0c },
        {0x380d, 0x80 }, {0x380e, 0x07 }, {0x380f, 0xd0 },
        {0x3813, 0x04 }, {0x3618, 0x04 }, {0x3612, 0x2b },
        {0x3709, 0x12 }, {0x370c, 0x00 }, {0x3a02, 0x07 },
        {0x3a03, 0xae }, {0x3a14, 0x07 }, {0x3a15, 0xae },
        {0x4004, 0x06 }, {0x3002, 0x1c }, {0x3006, 0xc3 },
        {0x4713, 0x02 }, {0x4407, 0x0c }, {0x460b, 0x37 },
        {0x460c, 0x20 }, {0x4837, 0x2c }, {0x3824, 0x01 },
        {0x5001, 0x83 }, {0x3034, 0x18 }, {0x3035, 0x21 },
        {0x3036, 0x46 }, {0x3037, 0x13 },{ REG_NULL, 0x00 },
};

/* 320X240 QVGA */
static  struct sensor_register ov5640_qvga[] = {
	{0x3c07, 0x08 }, //{0x3820, 0x41 }, {0x3821, 0x07 },
	{0x3814, 0x31 }, {0x3815, 0x31 }, {0x3800, 0x00 },
	{0x3801, 0x00 }, {0x3802, 0x00 }, {0x3803, 0x04 },
	{0x3804, 0x0a }, {0x3805, 0x3f }, {0x3806, 0x07 },
	{0x3807, 0x9b }, {0x3808, 0x01 }, {0x3809, 0x40 },
	{0x380a, 0x00 }, {0x380b, 0xf0 }, {0x380c, 0x07 },
	{0x380d, 0x68 }, {0x380e, 0x03 }, {0x380f, 0xd8 },
	{0x3813, 0x06 }, {0x3618, 0x00 }, {0x3612, 0x29 },
	{0x3709, 0x52 }, {0x370c, 0x03 }, {0x3a02, 0x0b },
	{0x3a03, 0x88 }, {0x3a14, 0x0b }, {0x3a15, 0x88 },
	{0x4004, 0x02 }, {0x3002, 0x1c }, {0x3006, 0xc3 },
	{0x4713, 0x03 }, {0x4407, 0x04 }, {0x460b, 0x35 },
	{0x460c, 0x22 }, {0x4837, 0x22 }, {0x3824, 0x02 },
	{0x5001, 0xa3 }, {0x3034, 0x18 }, {0x3035, 0x21},{0x3036, 0x46 }, 
	{0x3037, 0x13 },{ REG_NULL, 0x00 },
};

/* 2592X1944 QSXGA */
static struct sensor_register ov5640_QSXGA[] = {
	{0x3c07, 0x07 }, //{0x3820, 0x40 }, {0x3821, 0x06 },
	{0x3814, 0x11 }, {0x3815, 0x11 }, {0x3800, 0x00 },
	{0x3801, 0x00 }, {0x3802, 0x00 }, {0x3803, 0x00 },
	{0x3804, 0x0a }, {0x3805, 0x3f }, {0x3806, 0x07 },
	{0x3807, 0x9f }, {0x3808, 0x0a }, {0x3809, 0x20 },
	{0x380a, 0x07 }, {0x380b, 0x98 }, {0x380c, 0x0b },
	{0x380d, 0x1c }, {0x380e, 0x07 }, {0x380f, 0xb0 },
	{0x3813, 0x04 }, {0x3618, 0x04 }, {0x3612, 0x2b },
	{0x3709, 0x12 }, {0x370c, 0x00 }, {0x3a02, 0x07 },
	{0x3a03, 0xae }, {0x3a14, 0x07 }, {0x3a15, 0xae },
	{0x4004, 0x06 }, {0x3002, 0x1c }, {0x3006, 0xc3 },
	{0x4713, 0x02 }, {0x4407, 0x0c }, {0x460b, 0x37 },
	{0x460c, 0x20 }, {0x4837, 0x2c }, {0x3824, 0x01 },
	{0x5001, 0x83 }, {0x3034, 0x18 }, {0x3036, 0x46 }, 
	{0x3037, 0x13 },{ REG_NULL, 0x00 },
};

/*
 * The exposure target setttings
 */
static struct sensor_register module_exp_comp_neg4_regs[] = {
	
	{0x3a0f ,0x10},
	{0x3a10 ,0x08},
	{0x3a1b ,0x10},
	{0x3a1e ,0x08},
	{0x3a11 ,0x20},
	{0x3a1f ,0x10},
	{REG_NULL, 0x00},
};

static struct sensor_register module_exp_comp_neg3_regs[] = {
	{0x3a0f ,0x18},  
	{0x3a10 ,0x10},  
	{0x3a1b ,0x18},  
	{0x3a1e ,0x10},  
	{0x3a11 ,0x30},  
	{0x3a1f ,0x10},  
	{REG_NULL, 0x00},
};

static struct sensor_register module_exp_comp_neg2_regs[] = {
	
	{0x3a0f ,0x20},    
	{0x3a10 ,0x18},    
	{0x3a11 ,0x41},    
	{0x3a1b ,0x20},    
	{0x3a1e ,0x18},    
	{0x3a1f ,0x10},    
	{REG_NULL, 0x00},
};

static struct sensor_register module_exp_comp_neg1_regs[] = {
	
	{0x3a0f ,0x28},  
	{0x3a10 ,0x20},  
	{0x3a11 ,0x51},  
	{0x3a1b ,0x28},  
	{0x3a1e ,0x20},  
	{0x3a1f ,0x10},  
	{REG_NULL, 0x00},
};

static struct sensor_register module_exp_comp_zero_regs[] = {
	
	/*{0x3a0f ,0x38},
	{0x3a10 ,0x30},
	{0x3a11 ,0x61},
	{0x3a1b ,0x38},
	{0x3a1e ,0x30},
	{0x3a1f ,0x10},*/
	{0x3a0f, 0x40},
    {0x3a10, 0x38},
    {0x3a11, 0x71},
    {0x3a1b, 0x40},
    {0x3a1e, 0x38},
    {0x3a1f, 0x10},
{REG_NULL, 0x00},
};

static struct sensor_register module_exp_comp_pos1_regs[] = {
	
	{0x3a0f ,0x48},
	{0x3a10 ,0x40},
	{0x3a11 ,0x80},
	{0x3a1b ,0x48},
	{0x3a1e ,0x40},
	{0x3a1f ,0x20},
	{REG_NULL, 0x00},
};

static struct sensor_register module_exp_comp_pos2_regs[] = {
	
	{0x3a0f ,0x50},   
	{0x3a10 ,0x48},   
	{0x3a11 ,0x90},   
	{0x3a1b ,0x50},   
	{0x3a1e ,0x48},   
	{0x3a1f ,0x20},   
	{REG_NULL, 0x00},
};

static struct sensor_register module_exp_comp_pos3_regs[] = {
	
	{0x3a0f ,0x58}, 
	{0x3a10 ,0x50}, 
	{0x3a11 ,0x91}, 
	{0x3a1b ,0x58}, 
	{0x3a1e ,0x50}, 
	{0x3a1f ,0x20}, 
	{REG_NULL, 0x00},
};

static struct sensor_register module_exp_comp_pos4_regs[] = {
	
	{0x3a0f ,0x60},
	{0x3a10 ,0x58},
	{0x3a11 ,0xa0},
	{0x3a1b ,0x60},
	{0x3a1e ,0x58},
	{0x3a1f ,0x20},
	{REG_NULL, 0x00},
};

static struct sensor_register module_Normal_Effect_regs[] = {
	
	{0x5580 ,0x06},
	{0x5583 ,0x40},
	{0x5584 ,0x10},
	{0x5003 ,0x08},
	{REG_NULL, 0x00},
};

static struct sensor_register module_Blueish_Effect_regs[] = {
	
	{0x5580, 0x1e},
	{0x5583, 0xa0},
	{0x5584, 0x40},
	{0x5003, 0x08},
	{REG_NULL, 0x00},
};

static struct sensor_register module_Redish_Effect_regs[] = {
	
	{0x5580, 0x1e},
	{0x5583, 0x80},
	{0x5584, 0xc0},
	{0x5003, 0x08},
	{REG_NULL, 0x00},
};

static struct sensor_register module_BandW_Effect_regs[] = {
	
	{0x5580, 0x1e},
	{0x5583, 0x80},
	{0x5584, 0x80},
	{0x5003, 0x08},
	{REG_NULL, 0x00},
};

static struct sensor_register module_Sepia_Effect_regs[] = {
	
	{0x5580, 0x1e},
	{0x5583, 0x40},
	{0x5584, 0xa0},
	{0x5003, 0x08},
	{REG_NULL, 0x00},
};

static struct sensor_register module_Negative_Effect_regs[] = {
	
	{0x5580, 0x40},
	{0x5003, 0x08},
	{0x5583, 0x40},
	{0x5584, 0x10},
	{REG_NULL, 0x00},
};

static struct sensor_register module_Greenish_Effect_regs[] = {
	
	{0x5580, 0x1e},
	{0x5583, 0x60},
	{0x5584, 0x60},
	{0x5003, 0x08},
	{REG_NULL, 0x00},
};

static struct sensor_register Overexposure_Effect_regs[] = {
	
	{0x5580, 0x1e},
	{0x5583, 0xf0},
	{0x5584, 0xf0},
	{0x5003, 0x08},
	{REG_NULL, 0x00},
};

static struct sensor_register module_Solarize_Effect_regs[] = {
	
	{0x5580, 0x06},
	{0x5583, 0x40},
	{0x5584, 0x10},
	{0x5003, 0x09},
	{REG_NULL, 0x00},
};

static struct sensor_register module_WhiteBalance_Auto_regs[] = {
	{0x3406 ,0x00},
	{REG_NULL, 0x00},
};

static struct sensor_register module_WhiteBalance_Sunny_regs[] = {
	{0x3406 ,0x1 },
	{0x3400 ,0x6 },
	{0x3401 ,0x1c},
	{0x3402 ,0x4 },
	{0x3403 ,0x0 },
	{0x3404 ,0x4 },
	{0x3405 ,0xf3},
	{REG_NULL, 0x00},
};

static struct sensor_register module_WhiteBalance_Office_regs[] = {
	{0x3406 ,0x01},
	{0x3400 ,0x05},
	{0x3401 ,0x48},
	{0x3402 ,0x4 },
	{0x3403 ,0x0 },
	{0x3404 ,0x7 },
	{0x3405 ,0xcf},
	{REG_NULL, 0x00},
};

static struct sensor_register module_WhiteBalance_Cloudy_regs[] = {
	{0x3406 ,0x01},
	{0x3400 ,0x6 },
	{0x3401 ,0x48},
	{0x3402 ,0x4 },
	{0x3403 ,0x0 },
	{0x3404 ,0x4 },
	{0x3405 ,0xd3},
	{REG_NULL, 0x00},
};

static struct sensor_register module_WhiteBalance_Home_regs[] = {
	{0x3406 ,0x1 },
	{0x3400 ,0x4 },
	{0x3401 ,0x10},
	{0x3402 ,0x4 },
	{0x3403 ,0x0 },
	{0x3404 ,0x8 },
	{0x3405 ,0xb6},
	{REG_NULL, 0x00},
};

 static struct sensor_register module_brightness_0_regs[] =
 {
	{0x3212, 0x03},
	{0x5587, 0x40},
	{0x5588, 0x09},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 
 static struct sensor_register module_brightness_1_regs[] =
 {
	{0x3212, 0x03},
	{0x5587, 0x30},
	{0x5588, 0x09},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 static struct sensor_register module_brightness_2_regs[] =
 {
	{0x3212, 0x03},
	{0x5587, 0x20},
	{0x5588, 0x09},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
static struct sensor_register module_brightness_3_regs[] =
 {
	{0x3212, 0x03},
	{0x5587, 0x10},
	{0x5588, 0x09},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 static struct sensor_register module_brightness_4_regs[] =
 {
	{0x3212, 0x03},
	{0x5587, 0x00},
	{0x5588, 0x01},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
static struct sensor_register module_brightness_5_regs[] =
 {
	{0x3212, 0x03},
	{0x5587, 0x10},
	{0x5588, 0x01},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 static struct sensor_register module_brightness_6_regs[] =
 {
	{0x3212, 0x03},
	{0x5587, 0x20},
	{0x5588, 0x01},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 static struct sensor_register module_brightness_7_regs[] =
 {
	{0x3212, 0x03},
	{0x5587, 0x30},
	{0x5588, 0x01},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 static struct sensor_register module_brightness_8_regs[] =
 {
	{0x3212, 0x03},
	{0x5587, 0x40},
	{0x5588, 0x01},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 
 
 /*
  * CONTRAST
 */
 static struct sensor_register module_contrast_0_regs[] =
 {
	{0x3212, 0x03},
	{0x5586, 0x14},
	{0x5585, 0x14},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };

 static struct sensor_register module_contrast_1_regs[] =
 {
	{0x3212, 0x03},
	{0x5586, 0x18},
	{0x5585, 0x18},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };

 static struct sensor_register module_contrast_2_regs[] =
 {
	{0x3212, 0x03},
	{0x5586, 0x1c},
	{0x5585, 0x1c},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 static struct sensor_register module_contrast_3_regs[] =
 {
	{0x3212, 0x03},
	{0x5586, 0x20},
	{0x5585, 0x00},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 static struct sensor_register module_contrast_4_regs[] =
 {
	{0x3212, 0x03},
	{0x5586, 0x24},
	{0x5585, 0x10},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 static struct sensor_register module_contrast_5_regs[] =
 {
	{0x3212, 0x03},
	{0x5586, 0x28},
	{0x5585, 0x18},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 static struct sensor_register module_contrast_6_regs[] =
 {
	{0x3212, 0x03},
	{0x5586, 0x2c},
	{0x5585, 0x1c},
	{0x3212, 0x13},
	{0x3212, 0xa3},
	{REG_NULL, 0x00},
 };
 
static const struct ov5640_framesize ov5640_framesizes[] = {
	{ 
		/* QCIF */
		.width		= 176,
		.height		= 144,
		.regs		= ov5640_QCIF,
		.max_exp_lines	= 498,
	},{ 
		/* QVGA */
		.width		= 320,
		.height		= 240,
		.regs		= ov5640_qvga,
		.max_exp_lines	= 248,
	}, { 
		/* VGA */
		.width		= 640,
		.height		= 480,
		.regs		= ov5640_vga,
		.max_exp_lines	= 498,
	}, { 
		/* NTSC */
		.width		= 720,
		.height		= 480,
		.regs		= ov5640_NTSC,
		.max_exp_lines	= 498,
	}, { 
		/* PAL */
		.width		= 720,
		.height		= 576,
		.regs		= ov5640_PAL,
		.max_exp_lines	= 498,
	}, { 
		/* XGA */
		.width		= 1024,
		.height		= 768,
		.regs		= ov5640_xga,
		.max_exp_lines	= 498,
	}, { 
		/* 720P */
		.width		= 1280,
		.height		= 720,
		.regs		= ov5640_720p,
		.max_exp_lines	= 498,
	},  { 
		/* 1080p */
		.width		= 1920,
		.height		= 1080,
		.regs		= ov5640_1080p,
		.max_exp_lines	= 498,
	}, { 
		/* QSXGA */
		.width		= 2592,
		.height		= 1944,
		.regs		= ov5640_QSXGA,
		.max_exp_lines	= 498,
	}, {
		/*SVGA*/
		.width		=800,
		.height		=600,
		.regs		=ov5640_svga,
		.max_exp_lines	=498,
	},
};

/* YUV422 YUYV*/
static struct sensor_register ov5640_format_yuyv[] = {
	{ REG_FORMAT_CTRL00, 0x30 },
	{ REG_NULL, 0x0 },
};

/* YUV422 UYVY  */
static struct sensor_register ov5640_format_uyvy[] = {
	{ REG_FORMAT_CTRL00, 0x32 },
	{ REG_NULL, 0x0 },
};

/* Raw Bayer BGGR */
static struct sensor_register ov5640_format_bggr[] = {
	{ REG_FORMAT_CTRL00, 0x00 },
	{ REG_NULL, 0x0 },
};

/* RGB565 */
static struct sensor_register ov5640_format_rgb565[] = {
	{ REG_FORMAT_CTRL00, 0x60 },
	{ REG_NULL, 0x0 },
};

/* support four formats */
static const struct ov5640_pixfmt ov5640_formats[] = {
	{
		.code = MEDIA_BUS_FMT_YUYV8_2X8,
		.format_ctrl_regs = ov5640_format_yuyv,
	}, {
		.code = MEDIA_BUS_FMT_UYVY8_2X8,
		.format_ctrl_regs = ov5640_format_uyvy,
	}, {
		.code = MEDIA_BUS_FMT_RGB565_2X8_BE,
		.format_ctrl_regs = ov5640_format_rgb565,
	}, {
		.code = MEDIA_BUS_FMT_SBGGR8_1X8,
		.format_ctrl_regs = ov5640_format_bggr,
	},
};

/*!
 * to_ov5640 - find the ov5640 from the subdev
 *			   
 * @sd: pointer to standard V4L2 subdev structure
 *
 * Return the pointer of the ov5640 struct.
 */
static inline struct ov5640 *to_ov5640(struct v4l2_subdev *sd)
{
	return container_of(sd, struct ov5640, sd);
}

int ov5640_write(struct i2c_client *client, u16 reg, u8 val);
int ov5640_read(struct i2c_client *client, u16 reg, u8 *val);
int ov5640_write_array(struct i2c_client *client,
			      const struct sensor_register *regs);
int ov5640_s_ctrl(struct v4l2_ctrl *ctrl);
void ov5640_get_default_format(struct v4l2_mbus_framefmt *format);
int ov5640_enum_mbus_code(struct v4l2_subdev *sd,
				 struct v4l2_subdev_pad_config *cfg,
				 struct v4l2_subdev_mbus_code_enum *code);
int ov5640_enum_frame_sizes(struct v4l2_subdev *sd,
				   struct v4l2_subdev_pad_config *cfg,
				   struct v4l2_subdev_frame_size_enum *fse);
int ov5640_get_fmt(struct v4l2_subdev *sd,
			  struct v4l2_subdev_pad_config *cfg,
			  struct v4l2_subdev_format *fmt);
void ov5640_try_frame_size(struct v4l2_mbus_framefmt *mf,
				    const struct ov5640_framesize **size);
int ov5640_set_fmt(struct v4l2_subdev *sd,
			  struct v4l2_subdev_pad_config *cfg,
			  struct v4l2_subdev_format *fmt);
int ov5640_get_framerate(struct v4l2_subdev *sd, struct v4l2_streamparm *a);
int ov5640_set_framerate(struct v4l2_subdev *sd, struct v4l2_streamparm *a);
int ov5640_start_stop_stream(struct v4l2_subdev *sd, int on);
void ov5640_reset(void);
int ov5640_init(struct v4l2_subdev *sd);
struct ov5640_platform_data *
ov5640_get_pdata(struct i2c_client *client);

static const char * const ov5640_test_pattern_menu[] = {
	"Disabled",
	"Vertical Color Bars",
};

#endif
